<project name="CFUnited (j): SQL, for, MacroDef, and exec" basedir="." default="getServers">

	<target name="init">

		<property name="app.name" value="Client1App" />

		<property name="dev.root" location="DEVSERVER" />
		<property name="test.root" location="TESTSERVER" />
		<property name="locations.dev.clientroot" location="${dev.root}\${app.name}" />
		<property name="locations.test.clientroot" location="${test.root}\${app.name}" />

		<property name="locations.dev.customtags" location="${dev.root}\CustomTags" />
		<property name="locations.test.customtags" location="${test.root}\CustomTags" />

		<property name="locations.test.deploy" location="${locations.test.clientroot}\deploy" />
		<property name="locations.test.deployzip" location="${locations.test.deploy}\${app.name}.zip" />



		<!-- read all our 'secure' properties from this file; this defines the sql.userid and sql.password properties -->
		<property file="unames.properties" />

		<!-- create a classpath for ANT to use for finding and running the jdbc driver(s) -->
		<property name="jdbclibdir" location="lib" />
		<path id="jdbc.classpath">
			<fileset dir="${jdbclibdir}">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<!-- these properties would be better placed in a .properties file -->
		<!-- this will use the jtds.jar in the classpath -->
		<property name="sqlserver.driver" value="net.sourceforge.jtds.jdbc.Driver" />
		<property name="sqlserver.url" value="jdbc:jtds:sqlserver://localhost:1436/ANT;instance=NetSDK" />

		<!-- this will use the mysql-connector jar in the classpath -->
		<property name="mysql.driver" value="com.mysql.jdbc.Driver" />
		<property name="mysql.url" value="jdbc:mysql://localhost/ANT" />

		<!-- this is where the sql resultset will be stored -->
		<property name="db.output" value="serverslist.txt" />

		<!-- http://sourceforge.net/projects/ant-contrib -->
		<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="jdbc.classpath" />

	</target>


	<target name="getServers" depends="init" description="Queries a db for a list of servers">

		<sql driver="${mysql.driver}" url="${mysql.url}" userid="${sql.username}" password="${sql.password}" classpathref="jdbc.classpath" print="yes" output="${db.output}" showheaders="false" showtrailers="false">
		select ServerIP from servers where ActiveFlag=1
		</sql>

	</target>


	<!--
	
	IMAGINE: You have a database table of servers to which you'll deploy. 
	You want to query for the "active" servers, and for each server
	Copy your code onto it. This would assume an active network connection between
	the machine you're on and the servers to which you are deploying
	-->




	<target name="loopOverServers" depends="init,getServers">
		<loadfile srcFile="${db.output}" property="serverlist" />
		<for list="${serverlist}" param="server" delimiter="${line.separator}">
			<sequential>

				<echo>Copying to @{server}\Apps\${app.name}</echo>


				<copy toDir="@{server}\Apps\${app.name}" preserveLastModified="true" includeEmptyDirs="false">
					<fileset dir="${locations.test.clientroot}" />
				</copy>

				<tstamp>
					<format pattern="MM/dd/yyyy hh:mm aa" offset="-5" unit="year" property="customtagfilter" />
				</tstamp>
				<copy toDir="@{server}\CustomTags" preserveLastModified="true" includeEmptyDirs="false">
					<fileset dir="${locations.test.customtags}">
						<date datetime="${customtagfilter}" when="after" />
					</fileset>
				</copy>

			</sequential>
		</for>

	</target>






	<!--  NOW IMAGINE:
	
	You want to do the same as above, but you need to open and close the connection to each server
	because your network people run a tight ship, and they don't want connections open
	between your dev environment and your other environments except 
	during the brief time it takes to copy code
	
	-->

	<target name="deployToAllServers" depends="init,getServers">
		<!-- open the connections using a bat file provided to you by your network admins;
		we'll call the bat file using a self-made task that we create with macrodef -->
		<OpenOrCloseConnections action="open" />

		<!-- call the loopOverServers target and copy all code -->
		<antcall target="loopOverServers" />

		<!-- close the connections -->
		<OpenOrCloseConnections action="close" />
	</target>


	<!-- MACRODEF: this little gem lits you define your own tasks! -->

	<macrodef name="OpenOrCloseConnections">
		<attribute name="action" default="close" />
		<!-- imagine: this OpenOrClose.bat is provided to you by your network people to open 
		up the appropriate connections, and then close them, for the life of your script. 
		In this way, you can directly copy files across the network during a brief window of 
		access and then automatically remove that access once the deployment is over -->
		<sequential>
			<exec executable="cmd">
				<arg value="/c" />
				<arg value="OpenOrClose.bat" />
				<arg value="-@{action}" />
			</exec>
		</sequential>
	</macrodef>


	<!-- FINALLY, IMAGINE:
	
	Imagine a table called "Deployments" and a table called "J_Deployments_Servers". And
	every time you deploy, you insert a row into the deployments table, get the ID
	of that deployment, and for each server you copy code to, you insert a row
	into J_Deployments_Servers with some audit information (IP address of machine
	from which the deployment was run, the exact time of the copy, etc).
	
	How would you do that using sql and macrodef up in your loopOverServers target?
	
	
	
	-->



</project>