
Big Picture:
---------------

ColdFusion Concurrency: A Presentation on Suffering and Enlightenment, in Two Parts

1) Shared Mutable Scope is suffering ... as demonstrated by Application-scoped data

2) CFThread is suffering.... And the Java Concurrency Framework is your path to enlightenment


Part I : Shared Mutable Scope

A) What is shared mutable scope?
B) Demo #1 : Race Conditions
C) Demo #2 : Race Conditions that make your heart skip
D) Real World Example: ColdFish  (Not sure I'm going to use this... depends on time)
E) Real World Example: A query without var-scoping

Part II : CFThread is suffering

A) ALL of the above applies with CFThread
	i) Shared mutable scope in threads is *the exact same thing* as shared mutable scope in application-scoped data/components
	ii) this is why you duplicate so much when using threads (yuck!)
	
B) Decomposing work into tasks to exploit concurrency
	i) farming example
	ii) computing examples
	iii) importance of assessing complexity vs. performance gain
	iiii) measure. measure. measure.
	
C) Threads are vERY low-level... they are the primitives of concurrency
	i) hard to monitor
	ii) hard to test
	iii) hard to debug
	iiii) impossible to sanely post-process
	iiiii) keyword: sane.
	
D) CFthread example

E) Intro to Java Concurrency Framework (JCF)
	i) Problems it solves
	ii) Simple Intro example to introduce concepts
	iii)  Slightly more complex example: Multi-Threaded Multiplication
		a) And why you'd never use threads for this!!! See above regarding "measure..."
	iiii) Using the JCF to build a multi-threaded Image thumbnail service  
		????
		??? Or maybe tim's gateway payment example?
		
		
F) Conclusion
	i) Shared Mutable State is the enemy of concurrency
		a) Aggressively monitor your application-scoped code and data for culprits
		b) same goes for app-scoped data/objects you throw into cfthread
	ii) Replace CFthread with JCF whenever possible
		a) Create thread-unaware components that "do the real work"
			i) easy to test!
			ii) maximum re-use
		b) create wrapper "tasks" which have a "call" method
		c) use javaloader to create proxy objects for the task
		d) submit the tasks to a JCF CompletionService
		e) poll for completed tasks periodically, where you can post-process the results